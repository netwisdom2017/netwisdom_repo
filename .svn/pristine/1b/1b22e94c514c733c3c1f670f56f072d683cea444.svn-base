package com.dev.warehouse.bus.userinfo.api;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.dev.warehouse.bus.entity.UserInfo;
import com.dev.warehouse.bus.userinfo.service.IUserInfoService;
import com.dev.warehouse.enumInfo.PhoneCategoryShowFlagEnum;
import com.dev.warehouse.enumInfo.RegisterTypeEnum;
import com.dev.warehouse.enumInfo.UserGroupIdEnum;
import com.dev.warehouse.response.ResponseBean;
import com.dev.warehouse.sys.common.Constast;
import com.dev.warehouse.utils.StringUtil;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

@RestController
@Api(tags = "ユーザー管理API")
@RequestMapping("/user")
public class UserInfoApi {
	
	@Autowired
    private IUserInfoService userInfoService;
    
    /**
     * ユーザー情報を新規登録する(1.メール 2.Wechat)
     * @param mailAddress
     * @param password
     * @param nickname
     * @param sex
     * @param iconPath
     * @param registerType
     * @return
     */
    @ApiOperation("ユーザー新規登録")
    @ApiImplicitParams({
    	@ApiImplicitParam(name="mailAddress", value="メールアドレス"),
    	@ApiImplicitParam(name="password", value="パスワード"),
    	@ApiImplicitParam(name="nickname", value="ニックネーム"),
    	@ApiImplicitParam(name="sex", value="性別"),
    	@ApiImplicitParam(name="iconPath", value="アイコンパス"),
    	@ApiImplicitParam(name="registerType", value="登録種類", dataType="int",required = true)
    })
    @PostMapping("userinfo/register")
    public ResponseBean loadAnalyseByStudyScheduleIdForApp(
    		String mailAddress, String password, String nickname,
    		Integer sex, String iconPath, @RequestParam(required = true) int registerType){

    	//メール登録の場合、チェックを行います
    	if(registerType == RegisterTypeEnum.MAIL.getValue()){
    		//判断邮件、密码是否为空或空字符串
    		if(StringUtil.isNullOrBlank(mailAddress)
    				|| StringUtil.isNullOrBlank(password)){
    			return new ResponseBean(Constast.ERROR, "「メールアドレス」、「パスワード」:両方入力してください", null, null);
    		}
            //判断是否为邮件格式
    		if(!StringUtil.isEmailAddress(mailAddress)){
    			return new ResponseBean(Constast.ERROR, "メールアドレス形式は正しくありません", null, null);
    		}
    		//判断密码长度在6-16之间
            if(!StringUtil.lengthCheck(password, 6, 16)){
            	return new ResponseBean(Constast.ERROR, "パスワードは6-16桁を入力してください", null, null);
    		}
            
            //ユーザー新規登録処理を行います　START
            UserInfo userInfo = new UserInfo();
            userInfo.setMailaddress(mailAddress);
            userInfo.setPassword(password);
            //ユーザーグループID(デフォルト：普通ユーザー)
            userInfo.setUserGroupId(UserGroupIdEnum.COMMON_USER.getValue());
            //携帯種類表示フラグ(デフォルト：表示)
            userInfo.setPhoneCategoryShowFlag(PhoneCategoryShowFlagEnum.SHOW.getValue());
            userInfoService.save(userInfo);
            //ユーザー新規登録処理を行います END
            
    		return new ResponseBean(Constast.OK, "ユーザー登録処理成功しました", 123, 456);
    	}
    	//ユーザー新規登録処理を行います
    	return new ResponseBean(Constast.OK, "ユーザー登録処理失敗しました", null, null);
    }
}

