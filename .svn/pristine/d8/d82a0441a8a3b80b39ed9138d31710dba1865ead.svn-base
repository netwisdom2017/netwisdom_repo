package com.dev.warehouse.sys.realm;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.dev.warehouse.authenticationToken.JWTToken;
import com.dev.warehouse.sys.common.ActiverUser;
import com.dev.warehouse.sys.common.Constast;
import com.dev.warehouse.sys.entity.User;
import com.dev.warehouse.sys.service.IUserService;
import com.dev.warehouse.utils.JWTUtil;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;

import java.util.ArrayList;
import java.util.List;

public class JwtRealm extends AuthorizingRealm {

    @Autowired
    /**
     * 当需要使用的时候，才加载。  即：当CacheAspect被解析之后，userService才会解析，要不然切面会不生效
     */
    @Lazy
    private IUserService userService;

    @Override
    public String getName(){
        return this.getClass().getSimpleName();
    }

    /**
     * 大坑！，必须重写此方法，不然Shiro会报错
     */
    @Override
    public boolean supports(AuthenticationToken token) {
        return token instanceof JWTToken;

    }
    
    /**
     * 授权
     * @param principalCollection
     * @return
     */
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
        SimpleAuthorizationInfo authorizationInfo = new SimpleAuthorizationInfo();
        ActiverUser activerUser = (ActiverUser) principalCollection.getPrimaryPrincipal();
        
        User user = activerUser.getUser();
        List<String> superPermission = new ArrayList<>();
        superPermission.add("*:*");
        List<String> permissions = activerUser.getPermission();
        if (user.getType().equals(Constast.USER_TYPE_SUPER)){
            authorizationInfo.addStringPermissions(superPermission);
        }else {
            if (null!=permissions&&permissions.size()>0){
                authorizationInfo.addStringPermissions(permissions);
            }
        }
        return authorizationInfo;
    }

    /**
     * 认证
     * @param authenticationToken
     * @return
     * @throws AuthenticationException
     */
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {

    	String token = (String) authenticationToken.getCredentials();
    	String username = JWTUtil.getUsername(token);
    	
    	if (username == null) {
            throw new AuthenticationException("please login again");
        }
    	 
        QueryWrapper<User> queryWrapper = new QueryWrapper<>();
        queryWrapper.eq("loginname",username);
        //通过用户名从数据库中查询出该用户
        User user = userService.getOne(queryWrapper);
        if(user == null){
        	  throw new AuthenticationException("please login again");
        }else{
        	if (!JWTUtil.verify(token, username, user.getPwd())) {
        		AuthenticationException a = new AuthenticationException("please login again");
                throw new AuthenticationException("please login again");
            }else{
                SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(token,token,this.getName());
                return info;
            }
        }
    }
}
